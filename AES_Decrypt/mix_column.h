#ifndef MIX_COLUMN_H
#define MIX_COLUMN_H
void cal(int num1, int num2, int num3, int num4, uint8_t *mixsum, int j,int temp_a, int temp_b, int temp_c, int temp_d)
{
    if(num1*2>255)
    {
        num1=(2*num1-256)^0x1b;
        num1=num1^temp_a;
        if(num1*2>255)
        {
            num1=(2*num1-256)^0x1b;
            num1=num1^temp_a;
            if(num1*2>255)
                num1=(2*num1-256)^0x1b;
            else
                num1=num1*2;
        }
        else
        {
            num1=num1*2;
            num1=num1^temp_a;
            if(num1*2>255)
                num1=(2*num1-256)^0x1b;
            else
                num1=num1*2;
        }
    }
    else
    {
        num1=2*num1;
        num1=num1^temp_a;
        if(num1*2>255)
        {
            num1=(2*num1-256)^0x1b;
            num1=num1^temp_a;
            if(num1*2>255)
                num1=(2*num1-256)^0x1b;
            else
                num1=2*num1;
        }
        else
        {
            num1=2*num1;
            num1=num1^temp_a;
            if(num1*2>255)
                num1=(2*num1-256)^0x1b;
            else
                num1=2*num1;
        }
    }
    if(num2*2>255)
    {
        num2=(num2*2-256)^0x1b;
        if(num2*2>255)
        {
           num2=(num2*2-256)^0x1b;
           num2=num2^temp_b;
           if(num2*2>255)
           {
              num2=(num2*2-256)^0x1b;
              num2=num2^temp_b;
           }
           else
           {
              num2=2*num2;
              num2=num2^temp_b;
           }
        }
        else
        {
           num2=2*num2;
           num2=num2^temp_b;
           if(num2*2>255)
           {
              num2=(num2*2-256)^0x1b;
              num2=num2^temp_b;
           }
           else
           {
              num2=2*num2;
              num2=num2^temp_b;
           }
        }
    }
    else
    {
        num2=2*num2;
        if(num2*2>255)
        {
           num2=(num2*2-256)^0x1b;
           num2=num2^temp_b;
           if(num2*2>255)
           {
              num2=(num2*2-256)^0x1b;
              num2=num2^temp_b;
           }
           else
           {
              num2=2*num2;
              num2=num2^temp_b;
           }
        }
        else
        {
           num2=2*num2;
           num2=num2^temp_b;
           if(num2*2>255)
           {
              num2=(num2*2-256)^0x1b;
              num2=num2^temp_b;
           }
           else
           {
              num2=2*num2;
              num2=num2^temp_b;
           }
        }
    }
    if(num3*2>255)
    {
        num3=(2*num3-256)^0x1b;
        num3=num3^temp_c;
        if(num3*2>255)
        {
            num3=(2*num3-256)^0x1b;
            if(num3*2>255)
            {
                num3=(2*num3-256)^0x1b;
                num3=num3^temp_c;
            }
            else
            {
                num3=num3*2;
                num3=num3^temp_c;
            }
        }
        else
        {
            num3=num3*2;
            if(num3*2>255)
            {
                num3=(2*num3-256)^0x1b;
                num3=num3^temp_c;
            }
            else
            {
                num3=num3*2;
                num3=num3^temp_c;
            }
        }
    }
    else
    {
        num3=2*num3;
        num3=num3^temp_c;
        if(num3*2>255)
        {
            num3=(2*num3-256)^0x1b;
            if(num3*2>255)
            {
                num3=(2*num3-256)^0x1b;
                num3=num3^temp_c;
            }
            else
            {
                num3=num3*2;
                num3=num3^temp_c;
            }
        }
        else
        {
            num3=num3*2;
            if(num3*2>255)
            {
                num3=(2*num3-256)^0x1b;
                num3=num3^temp_c;
            }
            else
            {
                num3=num3*2;
                num3=num3^temp_c;
            }
        }
    }
    if(num4*2>255)
    {
        num4=(num4*2-256)^0x1b;
        if(num4*2>255)
        {
            num4=(num4*2-256)^0x1b;
            if(num4*2>255)
            {
                num4=(num4*2-256)^0x1b;
                num4=num4^temp_d;
            }
            else
            {
                num4=num4*2;
                num4=num4^temp_d;
            }
        }
        else
        {
            num4=num4*2;
            if(num4*2>255)
            {
                num4=(num4*2-256)^0x1b;
                num4=num4^temp_d;
            }
            else
            {
                num4=num4*2;
                num4=num4^temp_d;
            }
        }
    }
    else
    {
        num4=num4*2;
        if(num4*2>255)
        {
            num4=(num4*2-256)^0x1b;
            if(num4*2>255)
            {
                num4=(num4*2-256)^0x1b;
                num4=num4^temp_d;
            }
            else
            {
                num4=num4*2;
                num4=num4^temp_d;
            }
        }
        else
        {
            num4=num4*2;
            if(num4*2>255)
            {
                num4=(num4*2-256)^0x1b;
                num4=num4^temp_d;
            }
            else
            {
                num4=num4*2;
                num4=num4^temp_d;
            }
        }
    }
    mixsum[j]=num1^num2^num3^num4;
}
void mix_column(int a, int b, int c, int d, uint8_t *mixsum, int j)
{
    int temp_a=a;
    int temp_b=b;
    int temp_c=c;
    int temp_d=d;
    //14 11 13 9
    cal(a,b,c,d,mixsum,j,temp_a,temp_b,temp_c,temp_d);
    // 9 14 11 13
    a=temp_a,b=temp_b,c=temp_c,d=temp_d;
    cal(b,c,d,a,mixsum,j+4,temp_b,temp_c,temp_d,temp_a);
    //13  9 14 11
    a=temp_a,b=temp_b,c=temp_c,d=temp_d;
    cal(c,d,a,b,mixsum,j+8,temp_c,temp_d,temp_a,temp_b);
    //11 13  9 14
    a=temp_a,b=temp_b,c=temp_c,d=temp_d;
    cal(d,a,b,c,mixsum,j+12,temp_d,temp_a,temp_b,temp_c);
}
#endif // MIX_COLUMN_H
